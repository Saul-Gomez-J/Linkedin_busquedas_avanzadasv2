import streamlit as st
from openai import OpenAI
import os
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

# Inicializar el cliente de OpenAI
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

def generate_linkedin_search_query(prompt):
    response = client.chat.completions.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": """Eres un generador de URLs de b√∫squeda avanzada de Google para encontrar perfiles en LinkedIn. Tu objetivo es ayudar al usuario a construir URLs espec√≠ficas para b√∫squedas de LinkedIn seg√∫n sus descripciones en lenguaje natural. Cuando el usuario te proporcione una consulta, debes crear una URL que incluya todos los par√°metros de b√∫squeda mencionados.

            Ejemplo de entradas y salidas:

            1. Entrada: "Quiero encontrar desarrolladores de software en Estados Unidos que hayan estudiado en MIT o Stanford."
            output: site:linkedin.com/in/ "Software Developer" "United States" ("MIT" OR "Stanford")

            2. Entrada: "Busco perfiles en LinkedIn de personas que trabajen en ventas y est√©n ubicadas en Europa."
            output: site:linkedin.com/in/ "sales" ("France" OR "Germany" OR "Spain" OR "Italy" OR "United Kingdom" OR "Netherlands")

            3. Entrada: "Me gustar√≠a ver perfiles de gerentes de producto con experiencia en la industria tecnol√≥gica en California."
            output: site:linkedin.com/in/ "Product Manager" "technology industry" "California"

            4. Entrada: "Encuentra perfiles de ingenieros de datos en Canad√° que tengan experiencia con Hadoop y Spark."
            output: site:linkedin.com/in/ "Data Engineer" "Canada" ("Hadoop" OR "Spark")

            5. Entrada: "Quiero ver perfiles de personas que hayan trabajado como cient√≠ficos de datos en Europa y hayan estudiado inteligencia artificial."
            output: site:linkedin.com/in/ "Data Scientist" ("France" OR "Germany" OR "Spain" OR "Italy" OR "United Kingdom") "Artificial Intelligence"

            Recuerda utilizar `site:linkedin.com/in/` al inicio de cada consulta para limitar la b√∫squeda a perfiles de LinkedIn y utilizar operadores como `OR` para agrupar t√©rminos similares. Tambi√©n, agrupa t√©rminos dentro de comillas para realizar b√∫squedas exactas.
            """},
            {"role": "user", "content": f"Genera una consulta de b√∫squeda avanzada de LinkedIn para: {prompt}"}
        ],
        max_tokens=150,
        temperature=0.5
    )
    return response.choices[0].message.content.strip()

def build_google_search_url(search_query):
    base_url = "https://www.google.com/search?q="
    # Reemplazar espacios por '+', comillas por '%22' y par√©ntesis por sus c√≥digos URL
    encoded_query = search_query.replace(' ', '+').replace('"', '%22').replace('(', '%28').replace(')', '%29')
    return f"{base_url}{encoded_query}"

def main():
    st.set_page_config(page_title="Generador de B√∫squeda Avanzada de LinkedIn", page_icon="üîç")
    st.title("üîç Generador de B√∫squeda Avanzada de LinkedIn")

    st.write("""
    Introduce tu b√∫squeda en lenguaje natural y genera un enlace que te llevar√° a los resultados de b√∫squeda avanzada de LinkedIn en Google.
    
    **Ejemplos de b√∫squedas que puedes realizar:**
    - "Encuentra desarrolladores de software en Estados Unidos que hayan estudiado en MIT o Stanford"
    - "Busca perfiles de gerentes de ventas en Europa con experiencia en tecnolog√≠a"
    - "Quiero ver perfiles de cient√≠ficos de datos en Canad√° con experiencia en inteligencia artificial"
    """)

    user_query = st.text_area("Introduce tu b√∫squeda:", height=150)

    if st.button("Generar Enlace de B√∫squeda"):
        if user_query.strip():
            with st.spinner('Generando consulta de b√∫squeda avanzada...'):
                try:
                    search_query = generate_linkedin_search_query(user_query)
                    st.success("Consulta de b√∫squeda generada exitosamente.")
                    st.info(f"**Consulta Generada:** {search_query}")
                except Exception as e:
                    st.error(f"Error al generar la consulta: {e}")
                    return

            with st.spinner('Construyendo el enlace de b√∫squeda...'):
                try:
                    search_url = build_google_search_url(search_query)
                    st.success("Enlace de b√∫squeda construido exitosamente.")
                    st.markdown(f"[üîó Haz clic aqu√≠ para ver los resultados de b√∫squeda en Google]({search_url})")
                except Exception as e:
                    st.error(f"Error al construir el enlace: {e}")
        else:
            st.error("Por favor, introduce una consulta de b√∫squeda v√°lida.")

if __name__ == "__main__":
    main()
